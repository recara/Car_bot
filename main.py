#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import telebot
from telebot import types
import requests
import json
import xmltodict
import re
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
TELEGRAM_TOKEN = "8258338909:AAFDh6F71h7izvOd7USnUtQgyPEUQR_rhKs"
YANDEX_FOLDER_ID = "b1ga94okgf6e5d8edu0u" 
YANDEX_API_KEY = "AQVN11NisODlVimxoBFrYhs2suVgJ-WzW54BuEEw"
XML_FILE_PATH = "farpost-export-atcNew.xml"  # ‚¨ÖÔ∏è –ü–£–¢–¨ –ö –§–ê–ô–õ–£ - –ø–æ–ª–æ–∂–∏—Ç–µ XML —Ä—è–¥–æ–º —Å bot.py

class SimpleSearchEngine:
    def __init__(self, xml_file_path):
        self.xml_file_path = xml_file_path
        self.products = []
        self.load_data()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(self.products)}")
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç XML —Ñ–∞–π–ª"""
        try:
            with open(self.xml_file_path, 'r', encoding='utf-8') as file:
                xml_content = file.read()
            data = xmltodict.parse(xml_content)
            self.extract_products(data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XML: {e}")
    
    def extract_products(self, data):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ XML"""
        def extract_items(obj):
            if isinstance(obj, dict):
                product = {}
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                for key, value in obj.items():
                    key_lower = key.lower()
                    if any(term in key_lower for term in ['name', 'title', 'product']):
                        product['name'] = str(value)
                    elif any(term in key_lower for term in ['articul', 'article', 'code']):
                        product['article'] = str(value)
                    elif any(term in key_lower for term in ['brand', 'mark']):
                        product['brand'] = str(value)
                    elif any(term in key_lower for term in ['price', 'cost']):
                        price = self.extract_price(value)
                        if price:
                            product['price'] = price
                    elif any(term in key_lower for term in ['model', 'car']):
                        product['car_model'] = str(value)
                
                if product and len(product) >= 2:
                    self.products.append(product)
                
                for key, value in obj.items():
                    extract_items(value)
            
            elif isinstance(obj, list):
                for item in obj:
                    extract_items(item)
        
        extract_items(data)
    
    def extract_price(self, value):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É"""
        if not value:
            return None
        text = str(value)
        matches = re.findall(r'(\d{1,10})', text)
        for match in matches:
            if match.isdigit():
                price = int(match)
                if 10 <= price <= 1000000:
                    return price
        return None
    
    def search(self, query):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫"""
        query_lower = query.lower()
        results = []
        
        for product in self.products:
            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_text = ""
            if 'name' in product:
                search_text += product['name'].lower() + " "
            if 'brand' in product:
                search_text += product['brand'].lower() + " "
            if 'car_model' in product:
                search_text += product['car_model'].lower() + " "
            if 'article' in product:
                search_text += product['article'].lower() + " "
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
            if query_lower in search_text:
                results.append(product)
        
        return results[:8]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

class SimpleAI:
    def __init__(self, folder_id, api_key):
        self.folder_id = folder_id
        self.api_key = api_key
        self.url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {api_key}",
            "x-folder-id": folder_id
        }
    
    def get_response(self, query, products):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        if not products:
            return "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
        products_text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        for i, product in enumerate(products, 1):
            products_text += f"{i}. "
            if 'name' in product:
                products_text += f"{product['name']} "
            if 'article' in product:
                products_text += f"(–∞—Ä—Ç: {product['article']}) "
            if 'price' in product:
                products_text += f"- {product['price']} —Ä—É–±"
            products_text += "\n"
        
        prompt = f"""–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç—è–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:

{products_text}

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç:"""
        
        data = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.3,
                "maxTokens": 1000
            },
            "messages": [{"role": "user", "text": prompt}]
        }
        
        try:
            response = requests.post(self.url, headers=self.headers, json=data, timeout=20)
            response.raise_for_status()
            result = response.json()
            return result['result']['alternatives'][0]['message']['text']
        except Exception as e:
            logger.error(f"AI –æ—à–∏–±–∫–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return self.get_simple_response(products)
    
    def get_simple_response(self, products):
        """–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI"""
        response = "üéØ –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n\n"
        for i, product in enumerate(products, 1):
            response += f"{i}. "
            if 'name' in product:
                response += f"**{product['name']}** "
            if 'article' in product:
                response += f"(–∞—Ä—Ç: {product['article']}) "
            if 'price' in product:
                response += f"- {product['price']} —Ä—É–±"
            response += "\n"
        return response

class SimpleBot:
    def __init__(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ XML —Ñ–∞–π–ª–∞
        if not os.path.exists(XML_FILE_PATH):
            logger.error(f"‚ùå XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {XML_FILE_PATH}")
            logger.info("üí° –ü–æ–ª–æ–∂–∏—Ç–µ XML —Ñ–∞–π–ª –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É —á—Ç–æ –∏ bot.py")
            return
        
        self.bot = telebot.TeleBot(TELEGRAM_TOKEN)
        self.search_engine = SimpleSearchEngine(XML_FILE_PATH)
        self.ai = SimpleAI(YANDEX_FOLDER_ID, YANDEX_API_KEY)
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.setup_handlers()
    
    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.send_welcome(message)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            self.handle_search(message)
    
    def send_welcome(self, message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = """
ü§ñ <b>AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π</b>

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:

‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
‚Ä¢ –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è  
‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –¥–µ—Ç–∞–ª–∏
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
‚Ä¢ –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–∞ Toyota
‚Ä¢ –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
‚Ä¢ ABC123456

üéØ <b>–Ø –Ω–∞–π–¥—É –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é!</b>
        """
        
        self.bot.send_message(
            message.chat.id, 
            welcome_text, 
            parse_mode='HTML'
        )
    
    def handle_search(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        user_id = message.chat.id
        query = message.text
        
        logger.info(f"üîç –ü–æ–∏—Å–∫: {query}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç "–¥—É–º–∞–µ—Ç"
        self.bot.send_chat_action(user_id, 'typing')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = self.search_engine.search(query)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        ai_response = self.ai.get_response(query, results)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if results:
            response = f"""
üîç <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>

{ai_response}

üìä <b>–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {len(results)}
            """
        else:
            response = f"""
üîç <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É:</b> <code>{query}</code>

{ai_response}

üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</i>
            """
        
        self.bot.send_message(
            user_id,
            response,
            parse_mode='HTML'
        )
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            logger.info("üì± –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—â–∏—Ç–µ –≤ Telegram...")
            self.bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(10)
            self.start()

# üöÄ –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´
if __name__ == "__main__":
    bot = SimpleBot()
    bot.start()